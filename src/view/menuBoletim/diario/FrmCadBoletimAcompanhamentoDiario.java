/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.menuBoletim.diario;

import java.awt.HeadlessException;
import view.menuCadastro.vacina.*;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import model.Animal;
import model.BoletimAcompanhamento;
import model.Medicacao;
import model.Tarefa;
import model.Tratador;
import model.dao.impl.AnimalDAO;
import model.dao.impl.BoletimAcompanhamentoDAO;
import model.dao.impl.RotinaTratamentoDAO;
import model.dao.impl.TarefaDAO;
import model.dao.impl.TratadorDAO;
import model.enu.EnumParecer;

/**
 *
 * @author pc
 */
public class FrmCadBoletimAcompanhamentoDiario extends javax.swing.JDialog {

    /**
     * Creates new form FrmCadVacina
     */
    public FrmCadBoletimAcompanhamentoDiario(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelCabecalho = new javax.swing.JPanel();
        ljTituloCabecalho = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabelCodigo = new javax.swing.JLabel();
        jLabelCodigoTexto = new javax.swing.JLabel();
        jLabelObservacao = new javax.swing.JLabel();
        jLabelData = new javax.swing.JLabel();
        jtfData = new javax.swing.JTextField();
        jLabelTratador = new javax.swing.JLabel();
        jComboBoxTratador = new javax.swing.JComboBox<>();
        jLabelAnimal = new javax.swing.JLabel();
        jComboBoxAnimal = new javax.swing.JComboBox<>();
        jLabelParecer = new javax.swing.JLabel();
        jComboBoxParecer = new javax.swing.JComboBox<>();
        jScrollPaneTexAreaObs = new javax.swing.JScrollPane();
        jTextAreaObservacao = new javax.swing.JTextArea();
        jbGravar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListTarefas = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListMedicacoes = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBoxTarefas = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Boletim de Acompanhamento Diário");
        setPreferredSize(new java.awt.Dimension(600, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                aoAbrir(evt);
            }
        });

        jPanelCabecalho.setBackground(new java.awt.Color(246, 243, 224));

        ljTituloCabecalho.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ljTituloCabecalho.setForeground(new java.awt.Color(235, 161, 91));
        ljTituloCabecalho.setText("Cadastro de Boletim de Acompanhamento Diário");

        javax.swing.GroupLayout jPanelCabecalhoLayout = new javax.swing.GroupLayout(jPanelCabecalho);
        jPanelCabecalho.setLayout(jPanelCabecalhoLayout);
        jPanelCabecalhoLayout.setHorizontalGroup(
            jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(ljTituloCabecalho)
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanelCabecalhoLayout.setVerticalGroup(
            jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCabecalhoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ljTituloCabecalho)
                .addContainerGap())
        );

        jLabelCodigo.setText("Código");

        jLabelCodigoTexto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabelObservacao.setText("Observação");

        jLabelData.setText("Data");

        jLabelTratador.setText("Tratador");

        jComboBoxTratador.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxTratador.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                selecionaTratador(evt);
            }
        });

        jLabelAnimal.setText("Animal");

        jComboBoxAnimal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "..." }));
        jComboBoxAnimal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                aoSelecionarAnimal(evt);
            }
        });

        jLabelParecer.setText("Parecer");

        jComboBoxParecer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextAreaObservacao.setColumns(20);
        jTextAreaObservacao.setRows(5);
        jScrollPaneTexAreaObs.setViewportView(jTextAreaObservacao);

        jbGravar.setText("Gravar");
        jbGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aoGravar(evt);
            }
        });

        jListTarefas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "..." };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jListTarefas);

        jListMedicacoes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "..." };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jListMedicacoes);

        jLabel1.setText("Tarefas");

        jLabel2.setText("Medicações");

        jCheckBoxTarefas.setText("Tarefas Concluídas");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbGravar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jLabelCodigoTexto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelAnimal)
                                    .addComponent(jLabelCodigo)
                                    .addComponent(jLabelData))
                                .addGap(39, 39, 39)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jComboBoxAnimal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(23, 23, 23))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jtfData, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelParecer)
                                    .addComponent(jLabelTratador))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBoxTratador, 0, 151, Short.MAX_VALUE)
                                    .addComponent(jComboBoxParecer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelObservacao)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(14, 14, 14)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addComponent(jScrollPane1)
                                    .addComponent(jScrollPaneTexAreaObs)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jCheckBoxTarefas)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(27, 27, 27)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jLabelCodigoTexto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelData)
                            .addComponent(jtfData)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelTratador)
                            .addComponent(jComboBoxTratador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelParecer)
                    .addComponent(jComboBoxParecer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAnimal))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneTexAreaObs, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                    .addComponent(jLabelObservacao))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxTarefas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jbGravar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelCabecalho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelCabecalho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void aoGravar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aoGravar
        if (jComboBoxTratador.getSelectedIndex() != 0 && jComboBoxAnimal.getSelectedIndex() != 0) {
            Date dt = null;
            try {
                dt = sdf.parse(jtfData.getText());
                try {
                    if (selecionado == null) {
                        BoletimAcompanhamento ba = new BoletimAcompanhamento(0,
                                dt,
                                listaTratadores.get(jComboBoxTratador.getSelectedIndex() - 1),
                                jTextAreaObservacao.getText(),
                                null,
                                listaAnimais.get(jComboBoxAnimal.getSelectedIndex() - 1),
                                jCheckBoxTarefas.isSelected());
                        if (jComboBoxParecer.getSelectedIndex() == 0) {
                            ba.setTipo(EnumParecer.SAUDAVEL);
                        }
                        if (jComboBoxParecer.getSelectedIndex() == 1) {
                            ba.setTipo(EnumParecer.ESTADO_ALERTA);
                        }
                        if (jComboBoxParecer.getSelectedIndex() == 2) {
                            ba.setTipo(EnumParecer.DOENTE);
                        }
                        new BoletimAcompanhamentoDAO().inserir(ba);
                    } else {
                        selecionado.setDataBoletim(dt);
                        selecionado.setTratador(listaTratadores.get(jComboBoxTratador.getSelectedIndex() - 1));
                        selecionado.setObservacao(jTextAreaObservacao.getText());
                        selecionado.setAnimal(listaAnimais.get(jComboBoxAnimal.getSelectedIndex() - 1));
                        selecionado.setTarefaConcluida(jCheckBoxTarefas.isSelected());
                        if (jComboBoxParecer.getSelectedIndex() == 0) {
                            selecionado.setTipo(EnumParecer.SAUDAVEL);
                        }
                        if (jComboBoxParecer.getSelectedIndex() == 1) {
                            selecionado.setTipo(EnumParecer.ESTADO_ALERTA);
                        }
                        if (jComboBoxParecer.getSelectedIndex() == 2) {
                            selecionado.setTipo(EnumParecer.DOENTE);
                        }
                        new BoletimAcompanhamentoDAO().alterar(selecionado);
                    }
                    JOptionPane.showMessageDialog(null, "Salvo com sucesso ...");
                    setVisible(false);

                } catch (ClassNotFoundException | SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao inserir Boletim de Acompanhamento " + ex);
                }
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Digite uma data em formato válido (dd/MM/aaaa)!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "É necessário selecionar um Tratador e um Animal!");
        }
    }//GEN-LAST:event_aoGravar

    private void aoAbrir(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_aoAbrir
        if (selecionado == null) {
            jLabelCodigo.setVisible(false);
            jLabelCodigoTexto.setVisible(false);
            preencheComboParecer();
            preencheComboTratador();
            //preencheComboAnimais();
        } else {
            jLabelCodigo.setVisible(true);
            jLabelCodigoTexto.setVisible(true);
            preencheComboTratador(selecionado.getTratador());
            preencheComboParecer(selecionado.getTipo());
            preencheComboAnimais(selecionado.getAnimal(), selecionado.getTratador());
        }

    }//GEN-LAST:event_aoAbrir

    private void selecionaTratador(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selecionaTratador
        preencheComboAnimais(null, listaTratadores.get(jComboBoxTratador.getSelectedIndex() - 1));

    }//GEN-LAST:event_selecionaTratador

    private void aoSelecionarAnimal(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aoSelecionarAnimal
        preencherListaTarefas(listaAnimais.get(jComboBoxAnimal.getSelectedIndex() - 1));
        preencherListaMedicacao(listaAnimais.get(jComboBoxAnimal.getSelectedIndex() - 1));

    }//GEN-LAST:event_aoSelecionarAnimal

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCadBoletimAcompanhamentoDiario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCadBoletimAcompanhamentoDiario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCadBoletimAcompanhamentoDiario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCadBoletimAcompanhamentoDiario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmCadBoletimAcompanhamentoDiario dialog = new FrmCadBoletimAcompanhamentoDiario(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public void preencheComboTratador() throws HeadlessException {
        preencheComboTratador(null);
    }

    private void preencheComboTratador(Tratador tratador) {
        try {
            listaTratadores = new TratadorDAO().buscarTodos();

            DefaultComboBoxModel<String> dcm = (DefaultComboBoxModel<String>) jComboBoxTratador.getModel();

            dcm.removeAllElements();
            dcm.addElement("Selecione...");

            for (Tratador t : listaTratadores) {
                dcm.addElement(t.getNome());
            }
            if (tratador != null) {
                jComboBoxTratador.setSelectedItem(tratador.getNome());
            }
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao preencher a lista de tratadores" + ex);
        }
        
    }

    private void preencheComboAnimais() throws HeadlessException {
        preencheComboAnimais(null, null);
    }

    private void preencheComboAnimais(Animal animal, Tratador tratador) {
        if (tratador != null) {
            try {
                listaAnimais = new AnimalDAO().buscarTodosPorTratador(tratador);

                DefaultComboBoxModel<String> dcma = (DefaultComboBoxModel<String>) jComboBoxAnimal.getModel();

                dcma.removeAllElements();
                dcma.addElement("Selecione...");

                for (Animal a : listaAnimais) {
                    dcma.addElement(a.getNome());
                }

                if (animal != null) {
                    jComboBoxAnimal.setSelectedItem(animal.getNome());
                    preencherListaTarefas(animal);
                    preencherListaMedicacao(animal);

                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao preencher a lista de Animais \n" + ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um Tratador ");
        }
    }

    private void preencheComboParecer() throws HeadlessException {
        preencheComboParecer(null);
    }

    private void preencheComboParecer(EnumParecer tipo) {
        DefaultComboBoxModel<String> dcmp = (DefaultComboBoxModel<String>) jComboBoxParecer.getModel();

        dcmp.removeAllElements();
        dcmp.addElement("SAUDAVEL");
        dcmp.addElement("ESTADO_ALERTA");
        dcmp.addElement("DOENTE");

        if (tipo != null) {
            if (tipo.toString().equals("SAUDAVEL")) {
                dcmp.setSelectedItem("SAUDAVEL");
            }
            if (tipo.toString().equals("ESTADO_ALERTA")) {
                dcmp.setSelectedItem("ESTADO_ALERTA");
            }
            if (tipo.toString().equals("DOENTE")) {
                dcmp.setSelectedItem("DOENTE");
            }
        }
    }

    private void preencherListaTarefas(Animal a) {

        try {
            listaTarefas = new TarefaDAO().buscarPorRotina(a.getRotinaTrabamento().getId());
            DefaultListModel dlm = new DefaultListModel<>();

            dlm.removeAllElements();

            for (Tarefa t : listaTarefas) {
                dlm.addElement(t.getId() + " (" + t.getDescricao() + ")");
            }
            jListTarefas.setModel(dlm);
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao preencher a lista de Tarefas \n" + ex);
        }
    }

    private void preencherListaMedicacao(Animal a) {
        try {
            listaMedicacao = new RotinaTratamentoDAO().buscarUm(a.getRotinaTrabamento().getId()).getReceita().getMedicacoes();

            DefaultListModel dlm = new DefaultListModel<>();

            dlm.removeAllElements();

            for (Medicacao m : listaMedicacao) {
                dlm.addElement(m.getMedicamento().getNome() + " - "
                        + m.getDose() + " - "
                        + m.getFrequencia().getDescricao() + " - "
                        + sdf.format(m.getPeriodoIni()) + " - "
                        + sdf.format(m.getPeriodoFim()));
            }
            jListMedicacoes.setModel(dlm);

        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao preencher a lista de Medicações \n" + ex);
        }
    }

    public void preparaEdit(BoletimAcompanhamento ba) {
        selecionado = ba;
        jtfData.setText(sdf.format(ba.getDataBoletim()));
        jLabelCodigoTexto.setText(ba.getId() + "");
        jTextAreaObservacao.setText(ba.getObservacao());
        jCheckBoxTarefas.setSelected(ba.isTarefaConcluida());
    }

    private BoletimAcompanhamento selecionado = null;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private List<Tratador> listaTratadores;
    private List<Animal> listaAnimais;
    private List<Tarefa> listaTarefas;
    private List<Medicacao> listaMedicacao;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxTarefas;
    private javax.swing.JComboBox<String> jComboBoxAnimal;
    private javax.swing.JComboBox<String> jComboBoxParecer;
    private javax.swing.JComboBox<String> jComboBoxTratador;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelAnimal;
    private javax.swing.JLabel jLabelCodigo;
    private javax.swing.JLabel jLabelCodigoTexto;
    private javax.swing.JLabel jLabelData;
    private javax.swing.JLabel jLabelObservacao;
    private javax.swing.JLabel jLabelParecer;
    private javax.swing.JLabel jLabelTratador;
    private javax.swing.JList<String> jListMedicacoes;
    private javax.swing.JList<String> jListTarefas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelCabecalho;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneTexAreaObs;
    private javax.swing.JTextArea jTextAreaObservacao;
    private javax.swing.JButton jbGravar;
    private javax.swing.JTextField jtfData;
    private javax.swing.JLabel ljTituloCabecalho;
    // End of variables declaration//GEN-END:variables

}
